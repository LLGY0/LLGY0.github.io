<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-25T03:13:37+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LLGY</title><subtitle>个人的一个休闲兼技术博客站点，主要用于记录个人在学习过程中遇到的技术问题及解决方法、技术实验，以及一些比较有趣的事情。</subtitle><author><name>LLGY</name></author><entry><title type="html">Jekyll学习</title><link href="http://localhost:4000/study/Jekyll.html" rel="alternate" type="text/html" title="Jekyll学习" /><published>2023-05-24T00:00:00+08:00</published><updated>2023-05-24T00:00:00+08:00</updated><id>http://localhost:4000/study/Jekyll</id><content type="html" xml:base="http://localhost:4000/study/Jekyll.html"><![CDATA[<p>进行个<code class="language-plaintext highlighter-rouge">Jekyll</code>的学~呜呜呜，搞成功后我真的是要泪崩了，为了弄这玩意多次学到凌晨6点，但感谢我的运气，感谢我的耐心。那么废话不多说，赶快把这次学到的一切以语言形式记录下来把~</p>

<h1 id="1-软件介绍当然是复制别人的啦">1. 软件介绍（<a href="http://www.noobyard.com/article/p-nwnqarhl-gs.html">当然是复制别人的啦</a>）</h1>

<p>Jekyll是一个简单的，博客感知的静态站点生成器。</p>

<p>你将内容建立为文本文件（Markdown），并将其放到到文件夹中。而后，使用Liquid-enhanced HTML模板构建网站。Jekyll自动将内容和模板联系在一块儿，生成彻底由静态资源组成的网站，它适合上传到任何服务器。</p>

<p>Jekyll刚好是GitHub Pages的引擎，所以你能够在GitHub的服务器上免费托管项目的Jekyll页面/博客/网站。</p>

<h1 id="11-github--jekyll-工作机制">1.1 GitHub + Jekyll 工作机制</h1>

<p>简单地说，你在 GitHub 上有一个账号，名为<code class="language-plaintext highlighter-rouge">username</code>(任意)， 有一个项目，名为<code class="language-plaintext highlighter-rouge">username.github.io</code>(固定格式，<code class="language-plaintext highlighter-rouge">username</code>与账号名一致)， 项目分支名为 <code class="language-plaintext highlighter-rouge">master</code>(你可以自己改)。</p>

<p>这样，当你访问<code class="language-plaintext highlighter-rouge">http://username.github.io/</code>时，GitHub 会使用<code class="language-plaintext highlighter-rouge">Jekyll</code>解析用户 <code class="language-plaintext highlighter-rouge">username</code>名下的<code class="language-plaintext highlighter-rouge">username.github.io</code>项目中，分支为<code class="language-plaintext highlighter-rouge">master</code>的源代码，为你构建一个静态网站，并将生成的<code class="language-plaintext highlighter-rouge">index.html</code>展示给你。</p>

<p>如果要搭建自己的博客，你可以选择建立名为<code class="language-plaintext highlighter-rouge">username.github.io</code>的项目， 在master分支下存放网站源代码，也可以选择建立名为<code class="language-plaintext highlighter-rouge">blog</code>的项目，在<code class="language-plaintext highlighter-rouge">gh-pages</code>分支下存放网站源代码。（推荐前者）</p>

<p><a href="https://www.cnblogs.com/Eaglery/p/5126279.html">具体工作原理可以看这个</a></p>

<h1 id="2-总体流程">2. 总体流程</h1>

<h2 id="21-各软件的安装和升级msys2的安装">2.1 各软件的安装和升级msys2的安装</h2>

<pre><code class="language-msys2_install">ridk install（该步之前请上官网下载安装软件，之后cmd自动安装）
</code></pre>

<pre><code class="language-install">gem install jekyll bundler
</code></pre>

<pre><code class="language-jekyll_update">gem update jekyll
</code></pre>

<h2 id="24-jekyll相关指令">2.4 jekyll相关指令</h2>

<pre><code class="language-jekyll">jekyll new XXX（该步是建立一个新的Jekyll站点，创建指令需要管理员下的CMD，不然各种错误）
cd XXX （进入刚才创建的目录）
bundle install（该步为安装Gefile内需要组件）
bundle update
bundle exec jekyll serve（开始构建本地网址）（如果发现4000被占用，可以[参考这个](https://blog.csdn.net/weixin_30666401/article/details/98372840)）
</code></pre>
<pre><code class="language-jekyll_theme">（主题下载网址：https://rubygems.org/search?query=jekyll-theme）
（参考使用方法：将github上的文件全部下载覆盖自己的blog文件夹，之后再次bundle install）
</code></pre>

<h2 id="25-写blog">2.5 写Blog</h2>

<p>进入_post目录，开始你的创作吧，注意文件的格式必须为YEAR-MONTH-DAY-title.MARKUP，如：2019-02-13-blog.md。</p>

<h2 id="26-数据上传github全程必须有梯子或者改host">2.6 数据上传github（全程必须有梯子，或者改host）</h2>

<pre><code class="language-git_upload">git init
git checkout -b main
git add .
git commit -m "1st_1" （以XX名字上传github）
git remote add origin https://github.com/LLGY0/LLGY0.github.io.git
git push origin main （正式开始上传）
</code></pre>
<pre><code class="language-other_git_deploy_option">    （这一部分实战不需要，放在这是为了参考）
    git checkout source
    jekyll build
    git add -A
    git commit -m "update source"
    cp -r _site/ /tmp/
    git checkout master
    rm -r ./*
    cp -r /tmp/_site/* ./
    git add -A
    git commit -m "deploy blog"
    git push origin master
    git checkout source
    echo "deploy succeed"
    git push origin source
    echo "push source"
</code></pre>

<h2 id="26-运行查看blog">2.6 运行查看Blog</h2>
<p>直接访问项目名(<username>.github.io)就可以看你blog了，如：XXX.github.io</username></p>

<h2 id="27-自定义域名要花钱的">2.7 自定义域名（要花钱的）</h2>
<p>自定义域名需要有自己的域名，没有可以去阿里云注册购买个心意的域名；进入域名配置中心，配置域名解析；进入github项目设置，设置自己的域名并保存，开启Enforce HTTPS，就完成了自定义域名设置</p>

<h1 id="3-其他事项">3. 其他事项</h1>

<h2 id="31-网址初始附加">3.1 网址初始附加</h2>

<h3 id="311-超链接文字">3.1.1 <a href="https://github.com/kaeyleo/jekyll-theme-H2O">超链接文字→</a></h3>

<h3 id="312-插图片">3.1.2 插图片</h3>
<p><img src="http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-realhome.jpg" alt="图片名" /></p>

<h3 id="313-x高亮">3.1.3 <code class="language-plaintext highlighter-rouge">X</code>高亮</h3>

<h3 id="314-代码">3.1.4 代码：</h3>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;pre&gt;&lt;code</span> <span class="na">class=</span><span class="s">"language-css"</span><span class="nt">&gt;</span>p { color: red }<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div></div>

<h3 id="315">3.1.5</h3>
<ul>
  <li>X  -变成原点</li>
</ul>

<h3 id="316">3.1.6</h3>
<blockquote>
  <p>A</p>
</blockquote>

<h3 id="317-video-test">3.1.7 Video Test</h3>
<p>（这一部分仍需解决视频自动播放问题，如果用沙盒会导致下面的文字不见）</p>
<pre><code class="language-Code">&lt;iframe id="video" src="https://www.bilibili.com/video/BV1qs41157ZZ" width="100%" frameborder="0" allowfullscreen="allowfullscreen" sandbox=""&gt;&lt;/iframe&gt;
&lt;script type="text/javascript"&gt;document.getElementById("video").style.height=document.getElementById("video").scr
</code></pre>

<h3 id="318-加粗">3.1.8 加粗</h3>
<p><strong>A</strong></p>

<h3 id="319-公式">3.1.9 公式</h3>
<p><strong>这是一个不<code class="language-plaintext highlighter-rouge">align</code>的公式</strong>：</p>

\[\forall \alpha \in A, \quad a \cdot b = 0\]

<p><strong>这是一个<code class="language-plaintext highlighter-rouge">align</code>的公式</strong>：</p>

\[\begin{align}
    \Phi(0,x) = \max_{u \in \mathcal{D}} \bigg[
        \mathbb{E} &amp; \Phi\left(1, 
        x + \int_0^1 \sigma^2(s) \, \zeta(s) \, u_s \, ds
        + \int_0^1 \sigma(s) \, dW_s
    \right) \\
        &amp;- \frac{1}{2} \int_0^1 \sigma^2(s) \, \zeta(s) \,
        \mathbb{E} u_s^2  \, ds
    \bigg].
\end{align}\]

<h3 id="3110-空2格">3.1.10 空2格</h3>
<p>  </p>

<h3 id="3111-提示框">3.1.11 提示框</h3>
<div class="premonition note"> <div class="header"> <svg class="icon note" aria-hidden="true"> <use xlink:href="#icon-note"></use> </svg> <div class="title"> Note </div> </div> <div class="content"> <p>The body of the note goes here. Premonition allows you to write any <code class="language-plaintext highlighter-rouge">Markdown</code> inside the block.</p>



 </div> </div>
<div class="premonition info"> <div class="header"> <svg class="icon info" aria-hidden="true"> <use xlink:href="#icon-info"></use> </svg> <div class="title"> 小提示 </div> </div> <div class="content"> <p>The body of the info goes here. Premonition allows you to write any <code class="language-plaintext highlighter-rouge">Markdown</code> inside the block.</p>



 </div> </div>
<div class="premonition warning"> <div class="header"> <svg class="icon warning" aria-hidden="true"> <use xlink:href="#icon-warning"></use> </svg> <div class="title"> Warning </div> </div> <div class="content"> <p>The body of the warning goes here. Premonition allows you to write any <code class="language-plaintext highlighter-rouge">Markdown</code> inside the block.</p>



 </div> </div>
<div class="premonition error"> <div class="header"> <svg class="icon error" aria-hidden="true"> <use xlink:href="#icon-error"></use> </svg> <div class="title"> Error </div> </div> <div class="content"> <p>The body of the error goes here. Premonition allows you to write any <code class="language-plaintext highlighter-rouge">Markdown</code> inside the block.</p>



 </div> </div>
<div class="premonition citation"> <div class="header"> <svg class="icon citation" aria-hidden="true"> <use xlink:href="#icon-citation"></use> </svg> </div> <div class="content"> <p>To be or not to be is a question.</p>



 </div> <div class="ref"> ------ 莎士比亚 </div> </div>
<h3 id="3112-mermaid画">3.1.12 Mermaid画</h3>

<pre><code class="language-mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</code></pre>

<pre><code class="language-mermaid2">    graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</code></pre>

<pre><code class="language-mermaid2">    gantt
      title A Gantt Diagram
      dateFormat x
      axisFormat %L
      section Section
      A task           :a1, 0, 30ms
      Another task     :after a1, 20ms
      section Another
      Another another task      :b1, 20, 12ms
      Another another another task     :after b1, 24ms
</code></pre>

<pre><code class="language-mermaid2">    gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d
    Functionality added                 :milestone, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
</code></pre>
<h2 id="32-注意事项">3.2 注意事项</h2>

<h3 id="321-事项1">3.2.1 事项1</h3>
<p>注意git的时候千万不能用<code class="language-plaintext highlighter-rouge">gh-pages</code>（不然在github生成网站时会出错，错误提示：<code class="language-plaintext highlighter-rouge">Action failed with "You deploy from gh-pages to gh-pages；This operation is prohibited to protect your contents</code>）</p>

<h3 id="322-事项2">3.2.2 事项2</h3>
<p>命名github的<code class="language-plaintext highlighter-rouge">repository</code>时，命名直接用<code class="language-plaintext highlighter-rouge">用户名+.github.io</code>，这样设置用户文件夹里的<code class="language-plaintext highlighter-rouge">_config.yml</code>时，就不用改<code class="language-plaintext highlighter-rouge">baseurl</code>了。（如果改baseurl，很容易导致jekyll s时出错，出错代码：<code class="language-plaintext highlighter-rouge">sw not found</code>）</p>

<h3 id="323-事项3">3.2.3 事项3</h3>
<p><a href="https://blog.csdn.net/pxyyoona/article/details/123150326">关于<code class="language-plaintext highlighter-rouge">_config.yml</code>中<code class="language-plaintext highlighter-rouge">baseurl</code>的介绍</a></p>

<h3 id="324-事项4">3.2.4 事项4</h3>
<p>上传时出现<code class="language-plaintext highlighter-rouge">The requested URL returned error: 403</code>的解决方法
<a href="https://blog.csdn.net/weixin_45844049/article/details/123733065">链接1</a>
<a href="https://blog.csdn.net/qq_40226073/article/details/119801341">链接2</a></p>

<h3 id="325-事项5">3.2.5 事项5</h3>
<p>.gitignore文件有可能将_site文件添加为忽略文件，以至于后续操作将该文件忽略，从而无法上传至远程仓库的问题。_site文件以及.sass-cache文件都不能被忽略。
<a href="https://blog.csdn.net/qq_43328313/article/details/124066785">链接1</a></p>]]></content><author><name>LLGY</name></author><category term="Study" /><category term="Study" /><summary type="html"><![CDATA[进行个Jekyll的学~呜呜呜，搞成功后我真的是要泪崩了，为了弄这玩意多次学到凌晨6点，但感谢我的运气，感谢我的耐心。那么废话不多说，赶快把这次学到的一切以语言形式记录下来把~]]></summary></entry><entry><title type="html">第一次的POST</title><link href="http://localhost:4000/daily/First_post.html" rel="alternate" type="text/html" title="第一次的POST" /><published>2023-05-23T00:00:00+08:00</published><updated>2023-05-23T00:00:00+08:00</updated><id>http://localhost:4000/daily/First_post</id><content type="html" xml:base="http://localhost:4000/daily/First_post.html"><![CDATA[<p>第一次记录自己的日常生活，希望能在博士期间好好记录下自己的所学所见。之前试过在微博或者微信朋友圈匿名写日记，但在上述平台记录日常显然有两个弊端：一是我每天都在微博上记录自己的消极情绪，今后翻阅日记时难免会感受到一阵胃痛，但是微博也不可能在我回忆“青春”时过滤掉“过往的伤疤”；二是我很难在上述平台记录自己的学习过程，而这估计是我日后生活的一大部分（虽然我也想摸鱼）。</p>

<p>因此在Github上更新日记变得合理了起来：首先Github应该能用好久（千万别墙了）；其次通过Tag分类，能很好的让我定向回忆“悲痛文学”，但我想温习以前所学时，也不会被自己的日记搞二次抑郁（或者感到羞耻）。好！很有精神的LLGY，希望你能努力坚持记录日常，希望你即使找不到女朋友也不感到孤独，希望你即使多么绝望最终依然能站起来，希望你最终能自信起来。</p>

<p>第一次看到这里的旅客哟，如果你对我后续的Blog（或者我）感兴趣，欢迎给我发邮件与我交流，邮件内容包括不限于日常聊天、Blog优化、科研内容、相亲介绍（我还是想要个女朋友的）。</p>

<p>邮箱：luyin0731@outlook.com</p>]]></content><author><name>LLGY</name></author><category term="Daily" /><category term="Daily" /><summary type="html"><![CDATA[第一次记录自己的日常生活，希望能在博士期间好好记录下自己的所学所见。之前试过在微博或者微信朋友圈匿名写日记，但在上述平台记录日常显然有两个弊端：一是我每天都在微博上记录自己的消极情绪，今后翻阅日记时难免会感受到一阵胃痛，但是微博也不可能在我回忆“青春”时过滤掉“过往的伤疤”；二是我很难在上述平台记录自己的学习过程，而这估计是我日后生活的一大部分（虽然我也想摸鱼）。]]></summary></entry></feed>